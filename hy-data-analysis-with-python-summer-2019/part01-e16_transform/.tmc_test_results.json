[{"name": "test.test_transform.Transform.test_calls", "status": "failed", "message": "Expected 'zip' to have been called.", "passed": false, "points": ["p01-16.1"], "backtrace": ["  File \"/usr/lib/python3.6/unittest/case.py\", line 59, in testPartExecutor\n    yield\n", "  File \"/usr/lib/python3.6/unittest/case.py\", line 605, in run\n    testMethod()\n", "  File \"/home/du_ds/Documents/Git/PythonDataAnalysisCourse/hy-data-analysis-with-python-summer-2019/part01-e16_transform/test/test_transform.py\", line 44, in test_calls\n    z.assert_called()\n", "  File \"/usr/lib/python3.6/unittest/mock.py\", line 786, in assert_called\n    raise AssertionError(msg)\n"]}, {"name": "test.test_transform.Transform.test_empty", "status": "passed", "message": "", "passed": true, "points": ["p01-16.1"], "backtrace": []}, {"name": "test.test_transform.Transform.test_first", "status": "failed", "message": "Lists differ: [] != [2, 30, -3]\n\nSecond list contains 3 additional elements.\nFirst extra element 0:\n2\n\n- []\n+ [2, 30, -3] : Incorrect result for input strings 1 5 3 and 2 6 -1", "passed": false, "points": ["p01-16.1"], "backtrace": ["  File \"/usr/lib/python3.6/unittest/case.py\", line 59, in testPartExecutor\n    yield\n", "  File \"/usr/lib/python3.6/unittest/case.py\", line 605, in run\n    testMethod()\n", "  File \"/home/du_ds/Documents/Git/PythonDataAnalysisCourse/hy-data-analysis-with-python-summer-2019/part01-e16_transform/test/test_transform.py\", line 22, in test_first\n    self.assertEqual(result, [2, 30, -3], msg=\"Incorrect result for input strings %s and %s\" % (s1, s2))\n", "  File \"/usr/lib/python3.6/unittest/case.py\", line 829, in assertEqual\n    assertion_func(first, second, msg=msg)\n", "  File \"/usr/lib/python3.6/unittest/case.py\", line 1028, in assertListEqual\n    self.assertSequenceEqual(list1, list2, msg, seq_type=list)\n", "  File \"/usr/lib/python3.6/unittest/case.py\", line 1010, in assertSequenceEqual\n    self.fail(msg)\n", "  File \"/usr/lib/python3.6/unittest/case.py\", line 670, in fail\n    raise self.failureException(msg)\n"]}, {"name": "test.test_transform.Transform.test_random", "status": "passed", "message": "", "passed": true, "points": ["p01-16.1"], "backtrace": []}]